{"version":3,"file":"common.47e3680c088e0a8c.js","mappings":"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","names":["i0","InputCountryComponent","constructor","apiservice","this","EventEmitter","ngOnInit","filteredStates","stateCtrl","valueChanges","pipe","startWith","switchMap","state","filterValue","toLowerCase","length","post","countryName","map","res","states","filter","CountryName","includes","catchError","error","console","countrySelect","value","log","PaisCambiado","emit","propiedad","tipo","valor","onEnter","event","selectors","ctx","InputciudadComponent","ngOnDestroy","onKeyUp","ciudad","countrycode","ciudades","of","countryCode","cityName","subscribe","filteredCities","CityName","StateName","citySelect","ciudadCambiada","PostalCodeCity","StateCode","InputnumericoComponent","onInputChange","numericValue","target","replace","control","setValue","SweetalertService","errorMessage","texto","Swal","icon","text","showNotification","msg","$","notify","message","type","timer","placement","from","align","template","factory"],"sourceRoot":"webpack:///","sources":["./src/app/components/inputs/input-country/input-country.component.html","./src/app/components/inputs/input-country/input-country.component.ts","./src/app/components/inputs/inputciudad/inputciudad.component.html","./src/app/components/inputs/inputciudad/inputciudad.component.ts","./src/app/components/inputs/inputnumerico/inputnumerico.component.ts","./src/app/components/inputs/inputnumerico/inputnumerico.component.html","./src/app/services/sweetalert.service.ts"],"sourcesContent":["<form class=\"example-form\">\r\n  <mat-form-field class=\"example-full-width\" [ngClass]=\"{ 'has-success': valid }\">\r\n    <mat-label>{{ label }}</mat-label>\r\n    <input matInput aria-label=\"Envio\" [matAutocomplete]=\"auto\" [formControl]=\"stateCtrl\" [value]=\"stateCtrl.value\" />\r\n    <div *ngIf=\"valid\">\r\n      <span class=\"form-control-feedback\">\r\n        <i class=\"material-icons\">done</i>\r\n      </span>\r\n    </div>\r\n\r\n    <mat-autocomplete #auto=\"matAutocomplete\" (keydown.enter)=\"onEnter($event)\">\r\n      <mat-option *ngFor=\"let state of filteredStates | async\" [value]=\"state.CountryName\" class=\"select-paises\"\r\n        (click)=\"countrySelect(state)\">\r\n        <!-- <img alt=\"\" class=\"example-option-img\" [src]=\"state.flag\" height=\"20\" width=\"20\"> -->\r\n        <span class=\"ml-3\">{{ state.CountryName }}</span>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable, catchError, map, startWith, switchMap } from 'rxjs';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-input-country',\r\n  templateUrl: './input-country.component.html',\r\n  styleUrls: ['./input-country.component.css'],\r\n})\r\nexport class InputCountryComponent implements OnInit {\r\n  //stateCtrl = new FormControl();\r\n  @Input() stateCtrl: FormControl;\r\n  @Input() label: string;\r\n  @Input() tipo: Number;\r\n  filteredStates: Observable<any>;\r\n  @Output() PaisCambiado = new EventEmitter<any>();\r\n\r\n  @Input() valid: boolean = false;\r\n\r\n  states: any[] = [];\r\n\r\n  constructor(private apiservice: ApiService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.filteredStates = this.stateCtrl.valueChanges.pipe(\r\n      startWith(''),\r\n      switchMap((state) => {\r\n        let filterValue = state?.toLowerCase();\r\n        if (filterValue.length >= 3) {\r\n          let body = { countryName: filterValue };\r\n          return this.apiservice.post('cpc/co', body).pipe(\r\n            map((res: any) => {\r\n              this.states = res;\r\n              return this.states.filter((state) =>\r\n                state.CountryName.toLowerCase().includes(filterValue)\r\n              );\r\n            }),\r\n            catchError((error) => {\r\n              console.error('Error en la llamada al API:', error);\r\n              return [];\r\n            })\r\n          );\r\n        } else {\r\n          this.states = [];\r\n          return [];\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public countrySelect(value) {\r\n    console.log(value);\r\n\r\n    /* console.log('selecciono pais'); */\r\n    /*  let obj = { CountryCode: value.CountryCode }; */\r\n    this.PaisCambiado.emit({\r\n      propiedad: 'pais_seleccionado',\r\n      tipo: this.tipo,\r\n      valor: value,\r\n    });\r\n  }\r\n  onEnter(event: KeyboardEvent) {\r\n    // Verificar si la tecla presionada es \"Enter\"\r\n    if (event.key === 'Enter') {\r\n      // Realizar la acci√≥n que desees cuando se presiona \"Enter\"\r\n    }\r\n  }\r\n}\r\n","<form class=\"example-form\">\r\n    <mat-form-field class=\"example-full-width\">\r\n        <mat-label>{{label}}</mat-label>\r\n        <input matInput aria-label=\"Envio\" [matAutocomplete]=\"auto\" (input)=\"onKeyUp()\" [formControl]=\"ciudad\">\r\n        <mat-autocomplete #auto=\"matAutocomplete\">\r\n            <mat-option *ngFor=\"let city of filteredStates | async\" [value]=\"city.CityName\" (click)=\"citySelect(city)\">\r\n                <span class=\"ml-3\">{{city.StateName}} - {{ city.CityName }} {{ showpostal == true ?\r\n                    - city.PostalCodeCity : \"\" }}</span>\r\n            </mat-option>\r\n        </mat-autocomplete>\r\n    </mat-form-field>\r\n</form>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ApiService } from 'src/app/services/api.service';\r\n\r\n@Component({\r\n  selector: 'app-inputciudad',\r\n  templateUrl: './inputciudad.component.html',\r\n  styleUrls: ['./inputciudad.component.css'],\r\n})\r\nexport class InputciudadComponent implements OnInit {\r\n  /**Generico */\r\n  @Input() countrycode: FormControl; //codigo pais\r\n  @Input() ciudad: FormControl;\r\n  @Input() showpostal: boolean = true;\r\n  @Input() label: string;\r\n  filteredStates: Observable<any>;\r\n  @Output() ciudadCambiada = new EventEmitter<any>();\r\n  ciudades: any[] = [];\r\n  constructor(private apiservice: ApiService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  onKeyUp() {\r\n    const filterValue = this.ciudad.value;\r\n    // console.log(this.ciudad.value);\r\n\r\n    if (filterValue.length >= 3 && this.countrycode.value) {\r\n      this.ciudades = [];\r\n      this.filteredStates = of([]);\r\n      const body = {\r\n        countryCode: this.countrycode.value,\r\n        cityName: filterValue,\r\n      };\r\n      this.apiservice.post('cpc/yt', body).subscribe(\r\n        (res: any) => {\r\n          this.ciudades = res;\r\n          const filteredCities = this.ciudades.filter(\r\n            (state) =>\r\n              state.CityName.toLowerCase().includes(filterValue) ||\r\n              state.StateName.toLowerCase().includes(filterValue)\r\n          );\r\n          this.filteredStates = of(filteredCities);\r\n        },\r\n        (error) => {\r\n          console.error('Error en la llamada al API:', error);\r\n          this.ciudades = [];\r\n        }\r\n      );\r\n    } else {\r\n      this.ciudades = [];\r\n      this.filteredStates = of([]);\r\n    }\r\n  }\r\n\r\n  public citySelect(value) {\r\n    this.filteredStates = of([]);\r\n    // console.log(value);\r\n    let body = {\r\n      PostalCodeCity: value.PostalCodeCity,\r\n      StateCode: value.StateCode,\r\n      CityName: value.CityName,\r\n      StateName: value.StateName,\r\n    };\r\n    this.ciudadCambiada.emit({\r\n      propiedad: 'ciudad_seleccionada',\r\n      valor: body,\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-inputnumerico',\r\n  templateUrl: './inputnumerico.component.html',\r\n  styleUrls: ['./inputnumerico.component.css'],\r\n})\r\nexport class InputnumericoComponent implements OnInit {\r\n  @Input() control: FormControl;\r\n  @Input() label: string = '';\r\n  @Input() minLength: number = 1;\r\n  @Input() maxLength: number = 50;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onInputChange(event: any) {\r\n    const value = event.target.value;\r\n    const numericValue = value.replace(/[^0-9]/g, ''); // Filtrar solo n√∫meros\r\n    this.control.setValue(numericValue); // Actualizar el valor del FormControl\r\n  }\r\n}\r\n","<mat-form-field class=\"w-100\">\r\n    <input matInput type=\"text\" [placeholder]=\"label\" [formControl]=\"control\" (input)=\"onInputChange($event)\"\r\n        [minlength]=\"minLength\" [maxlength]=\"maxLength\">\r\n</mat-form-field>","import { Injectable } from '@angular/core';\r\nimport Swal from 'sweetalert2';\r\ndeclare const $: any;\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SweetalertService {\r\n  constructor() {}\r\n\r\n  private loadingAlert: any;\r\n  errorMessage(texto: string) {\r\n    return Swal.fire({\r\n      icon: 'error',\r\n      // title: 'Error',\r\n      text: texto,\r\n    });\r\n  }\r\n\r\n  public showNotification(msg: string) {\r\n    const type = [\r\n      '',\r\n      'info',\r\n      'success',\r\n      'warning',\r\n      'danger',\r\n      'rose',\r\n      'primary',\r\n    ];\r\n\r\n    //const color = Math.floor((Math.random() * 6) + 1);\r\n\r\n    $.notify(\r\n      {\r\n        icon: 'notifications',\r\n        message: msg,\r\n      },\r\n      {\r\n        type: type[3],\r\n        timer: 3000,\r\n        placement: {\r\n          from: 'top',\r\n          align: 'center',\r\n        },\r\n        template:\r\n          '<div data-notify=\"container\" class=\"col-xs-11 col-sm-3 alert alert-{0} alert-with-icon\" role=\"alert\">' +\r\n          '<button mat-raised-button type=\"button\" aria-hidden=\"true\" class=\"close\" data-notify=\"dismiss\">  <i class=\"material-icons\">close</i></button>' +\r\n          '<i class=\"material-icons\" data-notify=\"icon\">notifications</i> ' +\r\n          '<span data-notify=\"title\">{1}</span> ' +\r\n          '<span data-notify=\"message\">{2}</span>' +\r\n          '<div class=\"progress\" data-notify=\"progressbar\">' +\r\n          '<div class=\"progress-bar progress-bar-{0}\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\"></div>' +\r\n          '</div>' +\r\n          '<a href=\"{3}\" target=\"{4}\" data-notify=\"url\"></a>' +\r\n          '</div>',\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}